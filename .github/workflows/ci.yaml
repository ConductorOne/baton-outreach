name: ci
on: pull_request
jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        go-version: [1.23.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go tests
        run: (set -o pipefail && go test -v -covermode=count -json ./... | tee test.json)
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.6.0
        with:
          test-results: test.json

  grant-revoke-tests:
    runs-on: ubuntu-latest
    env:
      BATON_LOG_LEVEL: debug
      OUTREACH_ACCESS_TOKEN: ${{ secrets.OUTREACH_ACCESS_TOKEN }}
      CONNECTOR_PROFILE_GRANT: 'profile:41:assigned:user:3'
      CONNECTOR_PROFILE_ENTITLEMENT: 'profile:41:assigned'
      CONNECTOR_TEAM_GRANT: 'team:1:member:user:3'
      CONNECTOR_TEAM_ENTITLEMENT: 'team:1:member'
      CONNECTOR_PRINCIPAL: '3'
      CONNECTOR_PRINCIPAL_TYPE: 'user'
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build baton-outreach
        run: go build ./cmd/baton-outreach
      - name: Run baton-outreach
        run: ./baton-outreach --access-token ${{ env.OUTREACH_ACCESS_TOKEN }}

      - name: Install baton
        run: ./scripts/get-baton.sh && mv baton /usr/local/bin

        # PROFILES GRANT-REVOKE TESTS
      - name: Check for profile grant before revoking
        run: baton grants --entitlement="${{ env.CONNECTOR_PROFILE_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""

      - name: Revoke profile grant
        run: ./baton-outreach --access-token ${{ env.OUTREACH_ACCESS_TOKEN }} --revoke-grant="${{ env.CONNECTOR_PROFILE_GRANT }}"

      - name: Check profile grant was revoked
        run: ./baton-outreach --access-token ${{ env.OUTREACH_ACCESS_TOKEN }} && baton grants --entitlement="${{ env.CONNECTOR_PROFILE_ENTITLEMENT }}" --output-format=json | jq --exit-status "if .grants then .grants[]?.principal.id.resource != \"${{ env.CONNECTOR_PRINCIPAL }}\" else . end"

      - name: Grant profile entitlement
        run: ./baton-outreach --access-token ${{ env.OUTREACH_ACCESS_TOKEN }} --grant-entitlement="${{ env.CONNECTOR_PROFILE_ENTITLEMENT }}" --grant-principal="${{ env.CONNECTOR_PRINCIPAL }}" --grant-principal-type="${{ env.CONNECTOR_PRINCIPAL_TYPE }}"

      - name: Check grant was re-granted
        run: ./baton-outreach --access-token ${{ env.OUTREACH_ACCESS_TOKEN }} && baton grants --entitlement="${{ env.CONNECTOR_PROFILE_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""

      # TEAMS GRANT-REVOKE TESTS
      - name: Check for team grant before revoking
        run: baton grants --entitlement="${{ env.CONNECTOR_TEAM_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""

      - name: Revoke team grant
        run: ./baton-outreach --access-token ${{ env.OUTREACH_ACCESS_TOKEN }} --revoke-grant="${{ env.CONNECTOR_TEAM_GRANT }}"

      - name: Check team grant was revoked
        run: ./baton-outreach --access-token ${{ env.OUTREACH_ACCESS_TOKEN }} && baton grants --entitlement="${{ env.CONNECTOR_TEAM_ENTITLEMENT }}" --output-format=json | jq --exit-status "if .grants then .grants[]?.principal.id.resource != \"${{ env.CONNECTOR_PRINCIPAL }}\" else . end"

      - name: Grant team entitlement
        run: ./baton-outreach --access-token ${{ env.OUTREACH_ACCESS_TOKEN }} --grant-entitlement="${{ env.CONNECTOR_TEAM_ENTITLEMENT }}" --grant-principal="${{ env.CONNECTOR_PRINCIPAL }}" --grant-principal-type="${{ env.CONNECTOR_PRINCIPAL_TYPE }}"

      - name: Check grant was re-granted
        run: ./baton-outreach --access-token ${{ env.OUTREACH_ACCESS_TOKEN }} && baton grants --entitlement="${{ env.CONNECTOR_TEAM_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""


  with-refresh-token-test:
    runs-on: ubuntu-latest
    env:
      BATON_LOG_LEVEL: debug
      OUTREACH_REFRESH_TOKEN: ${{ secrets.OUTREACH_REFRESH_TOKEN }}
      OUTREACH_CLIENT_ID: ${{ secrets.OUTREACH_CLIENT_ID }}
      OUTREACH_CLIENT_SECRET: ${{ secrets.OUTREACH_CLIENT_SECRET }}

    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build baton-outreach
        run: go build ./cmd/baton-outreach
      - name: Run baton-outreach
        run: ./baton-outreach --outreach-client-id='${{env.OUTREACH_CLIENT_ID}}' --outreach-client-secret='${{env.OUTREACH_CLIENT_SECRET}}' --refresh_token='${{env.OUTREACH_REFRESH_TOKEN}}'